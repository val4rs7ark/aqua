/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.42
 * Generated at: 2019-10-04 06:47:31 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.was.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Calendar;
import java.util.List;
import java.util.Map;

public final class calendarAjax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("java.util.Calendar");
    _jspx_imports_classes.add("java.util.Map");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	List<Map<String,Object>> empStatusAList = (List<Map<String,Object>>)request.getAttribute("wasEmpStatusA");
if(empStatusAList!=null && empStatusAList.size()>0){


      out.write("    \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>일정관리[calendarUI.jsp]</title>\r\n");
      out.write("  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n");
      out.write("\t<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\">\r\n");
      out.write("\t<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"></script>\r\n");
      out.write("\t<script src=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"></script>\r\n");
      out.write("\t<script src='https://kit.fontawesome.com/a076d05399.js'></script>\r\n");
      out.write("  \t<style type=\"text/css\">\r\n");
      out.write("  \t#a_tag_YNext,#a_tag_YPrev,#a_tag_MNext,#a_tag_MPrev{\r\n");
      out.write("  \t\tcolor:#000000\r\n");
      out.write("  \t}\r\n");
      out.write("  \t</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");

	String calendar_empno = empStatusAList.get(empStatusAList.size()-1).get("empno").toString();
	Calendar cal = Calendar.getInstance();
	int day[][][] = new int[12][6][7];
	String week[] = {"일","월","화","수","목","금","토"};
	//cyyyy에는 년도가 담겨있다. - 2019
	String cyyyy = empStatusAList.get(empStatusAList.size()-1).get("empStatus_year").toString();
	//달 정보는 0부터 11사이의 값이다.1~12
	String cmonth = empStatusAList.get(empStatusAList.size()-1).get("empStatus_month").toString();
	//배열은 0부터 시작하기 때문에 다시 -1을 주어서 index로 활용하기 위한 icmonth
	int icmonth = Integer.parseInt(cmonth)-1;
	for(int month=0;month<12;month++){
			cal.set(Calendar.YEAR, Integer.parseInt(cyyyy));
			//이번달 마지막 날짜 저장하기  ::Calendar 클래스에 저장하기 위한 for문
			cal.set(Calendar.MONTH,month);
			int maxDay = cal.getActualMaximum(Calendar.DAY_OF_MONTH);
			for(int i=1;i<=maxDay;i++){
				cal.set(Calendar.DATE,i);
				day[cal.get(Calendar.MONTH)]
						[cal.get(Calendar.WEEK_OF_MONTH)-1]
								[cal.get(Calendar.DAY_OF_WEEK)-1]=i;
			}
	}

      out.write("\r\n");
      out.write("  <div style=\"font-size:25px;text-align:center;\">");
      out.print(cyyyy );
      out.write("</div>\r\n");
	
		//계산한 카렌더 정보를 화면에 출력하기
	for(int month=0;month<12;month++){
	//12달 중에 오늘인 달 9월달	
	if(month==icmonth){

      out.write("\r\n");
      out.write("<div style=\"font-size:70px;text-align:center;\">\r\n");
      out.write("\t<a id=\"a_tag_YPrev\" style='font-size:35px;' href=\"javascript:calendarYPrev('");
      out.print(cyyyy);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(cmonth);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(calendar_empno);
      out.write("')\"><i class='fas fa-angle-double-left'></i></a>\r\n");
      out.write("\t<span style=\"padding:20px;\"></span>\r\n");
      out.write("\t<a id=\"a_tag_MPrev\" style='font-size:35px;' href=\"javascript:calendarMPrev('");
      out.print(cyyyy);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(cmonth);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(calendar_empno);
      out.write("')\"><i class='fas fa-angle-left'></i></a>\r\n");
      out.write("\t<span style=\"padding:20px;\">");
      out.print(month+1 );
      out.write("</span>\r\n");
      out.write("\t<a id=\"a_tag_MNext\" style='font-size:35px;' href=\"javascript:calendarMNext('");
      out.print(cyyyy);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(cmonth);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(calendar_empno);
      out.write("')\"><i class='fas fa-angle-right'></i></a>\r\n");
      out.write("\t<span style=\"padding:20px;\"></span>\r\n");
      out.write("\t<a id=\"a_tag_YNext\" style='font-size:35px;' href=\"javascript:calendarYNext('");
      out.print(cyyyy);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(cmonth);
      out.write('\'');
      out.write(',');
      out.write('\'');
      out.print(calendar_empno);
      out.write("')\"><i class='fas fa-angle-double-right'></i></a>\r\n");
      out.write("</div>\r\n");
      out.write("<table align=\"center\" border=\"1\" width=\"100%\"><tr>\r\n");
 		
		for(int i=0;i<week.length;i++){
			//일 월 화 수 목 금 토
			out.print("<td align='center' width='170' height='30'>"+week[i]+"</td>");
		}
		out.print("</tr>");
		//날짜 출력하기
		//한달에 속한 주를 계산해서 반복처리
		for(int i=0;i<cal.get(Calendar.WEEK_OF_MONTH);i++){
		out.print("<tr>");
			//일주일 씩 출력하기
			for(int j=0;j<7;j++){
				//날짜정보를 가지고 있니??? 네! 트류
				if(day[month][i][j]!=0){
					out.print("<td align='right' width='170' height='90' valign='top'>");
					out.print("<table border='0' width='100%' height='100%'>");
					out.print("<tr><td align='right'>"+day[month][i][j]+"</td></tr>");
					///////////////////상태 이모티콘 td에 추가하기///////////////
					///////////////////////출근 , 휴가 , 외출 등 그날 상태 정보 표시하기///////////////////
					int i_status_day = 0;
					for(int z =0;z<(empStatusAList.size()-1);z++){
						Map<String,Object> rMap = empStatusAList.get(z);
						i_status_day = Integer.parseInt(rMap.get("STATUS_DAY").toString());
						if(day[month][i][j]==i_status_day){
							out.print("<tr><td><h5><span class='badge badge-secondary'>출근</span><h5></td></tr>");
						}
						else{
							out.print("<tr><td><h5>&nbsp;<h5></td></tr>");
						}
					}
					////////////////////////////////////////////////////
					out.print("<tr><td align='right'>"+"&nbsp;"+"</td></tr>");
					out.print("<tr><td align='right'>"+"&nbsp;"+"</td></tr>");
		/* +버튼을 추가하여 메모등록 구현해보기  */
					out.print("<tr><td align='right'><a href='javascript:memoForm("+cyyyy+","+(month+1)+","+day[month][i][j]+")'>+</a></td></tr>");					
					out.print("</table></td>");
				}else{
					out.print("<td>&nbsp;</td>");					
				}//end of if[공백처리]
			}/////end of inner ofr[주간일자]
			out.print("</tr>");
		}/////end of outter for[월별일자]

      out.write("\r\n");
      out.write("</table>\r\n");
 
		}///////////////////end of if[이번달 정보만 출력하기]
	}
}

      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
